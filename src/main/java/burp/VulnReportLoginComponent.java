/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
package burp;

import burp.impl.HttpService;
import com.codemagi.burp.HttpRequestThread;
import com.codemagi.burp.TimeLimitedCodeBlock;
import com.codemagi.burp.Utils;
import com.codemagi.burp.parser.HttpRequest;
import com.codemagi.burp.parser.HttpResponse;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author adetlefsen
 */
public class VulnReportLoginComponent extends javax.swing.JPanel {

    BurpExtender extender;
    IBurpExtenderCallbacks callbacks;
    
    //pattern used to extract CSRF token needed for login
    private static final Pattern CSRF_EXTRACTION_PATTERN = Pattern.compile("<input type=\"hidden\" name=\"_csrf\" value=\"([A-Za-z0-9+/=]+)\" />");
    
    //identifiers for settings
    private static final String VULN_REPORT_URL = "vulnreport.url";
    private static final String USERNAME = "vulnreport.username";
    
    private URL vulnReportBaseURL;
    private ICookie sessionCookie;
    private String csrfToken;
    
    /**
     * Creates new form VulnReportComponent
     */
    public VulnReportLoginComponent() {
        extender = (BurpExtender)BurpExtender.getInstance();
        callbacks = BurpExtender.getCallbacks();
        initComponents();
        
        //restore saved settings
        restoreSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        vulnReportURL = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        statusMessage = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(239, 137, 0));
        jLabel1.setText("Login to VulnReport");

        jLabel2.setText("VulnReport URL: ");

        vulnReportURL.setText("https://");
        vulnReportURL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                vulnReportURLFocusLost(evt);
            }
        });

        jLabel3.setText("Username:");

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        jLabel4.setText("Password:");

        loginButton.setText("Login");
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginButton)
                            .addComponent(vulnReportURL, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(username)
                            .addComponent(password)
                            .addComponent(statusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(vulnReportURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void vulnReportURLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vulnReportURLFocusLost

        if (sessionCookie == null) {
            try {
                //parse URL, issue GET, fetch CSRF token
                vulnReportBaseURL = new URL(vulnReportURL.getText());
                URL url = new URL(vulnReportBaseURL, "/login");

                //create GET request
                HttpRequest request = new HttpRequest(url);

                //issue request, with timeout
                HttpService service = new HttpService(url);
                HttpRequestThread requestThread = new HttpRequestThread(service, request.getBytes(), callbacks);
                try {
                    TimeLimitedCodeBlock.runWithTimeout(requestThread, 60, TimeUnit.SECONDS);
                } catch (Exception ex) {
                    BurpExtender.printStackTrace(ex);
                    setStatusMessage("Request timeout");
                }

                try {
                    //get response
                    HttpResponse response = HttpResponse.parseMessage(requestThread.getResponse());

                    //get session cookie 
                    sessionCookie = response.getCookie("vr.session");

                    //get CSRF token
                    Matcher matcher = CSRF_EXTRACTION_PATTERN.matcher(response.getBody());
                    if (matcher.find()) {
                        csrfToken = matcher.group(1);
                        setStatusMessage("Got CSRF: " + csrfToken);
                    }

                } catch (IOException ex) {
                    BurpExtender.printStackTrace(ex);
                    setStatusMessage("Invalid response");
                }

            } catch (MalformedURLException ex) {
                setStatusMessage("Invalid VulnReport URL");
            }
        }
    }//GEN-LAST:event_vulnReportURLFocusLost

    private void loginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseClicked
        try {                                            
            //get username and password, issue login request, get session token
            URL url = new URL(vulnReportURL.getText() + "/login");
            
            //create GET request
            HttpRequest request = new HttpRequest(url);
            request.setParameter("username", Utils.urlEncode(username.getText()));
            request.setParameter("password", Utils.urlEncode(new String(password.getPassword())));
            request.setParameter("_csrf", Utils.urlEncode(csrfToken));
            
            //add the session cookie
            request.addCookie(sessionCookie);
            
            //create POST request
            request.convertToPost();
            request.setContentLength();
            
            //issue request, with timeout
            HttpService service = new HttpService(url);
            HttpRequestThread requestThread = new HttpRequestThread(service, request.getBytes(), callbacks);
            try {
                TimeLimitedCodeBlock.runWithTimeout(requestThread, 60, TimeUnit.SECONDS);
            } catch (Exception ex) {
                BurpExtender.printStackTrace(ex);
                setStatusMessage("Request timeout");
            }
            
            try {
                //get response
                HttpResponse response = HttpResponse.parseMessage(requestThread.getResponse());
                
                //get session cookie
                sessionCookie = response.getCookie("vr.session");
                setStatusMessage("Login successful");
                
                //update options
                callbacks.printOutput("Login successful");
                extender.updateOptions();
                
            } catch (IOException ex) {
                BurpExtender.printStackTrace(ex);
                setStatusMessage("Invalid response");
            }
            
        } catch (MalformedURLException ex) {
            setStatusMessage("Invalid VulnReport URL");
        }
    }//GEN-LAST:event_loginButtonMouseClicked

    public void setStatusMessage(String message) {
        statusMessage.setText(message);
        
        //hide the message after a delay
        Timer timer = new Timer();
        timer.schedule(new CloseDialogTask(), 800);
    }
    
    class CloseDialogTask extends TimerTask {
        @Override
        public void run() {
            statusMessage.setText("");
        }
    }
    
    protected void saveSettings() {
        callbacks.printOutput("Saving settings...");
        callbacks.saveExtensionSetting(VULN_REPORT_URL, vulnReportURL.getText());
        callbacks.saveExtensionSetting(USERNAME, username.getText());
    }
    
    protected final void restoreSettings() {
        callbacks.printOutput("Restoring settings...");
        vulnReportURL.setText(callbacks.loadExtensionSetting(VULN_REPORT_URL));
        username.setText(callbacks.loadExtensionSetting(USERNAME));
    }

    public URL getVulnReportBaseURL() {
        return vulnReportBaseURL;
    }

    public ICookie getSessionCookie() {
        return sessionCookie;
    }

    public String getCsrfToken() {
        return csrfToken;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel statusMessage;
    private javax.swing.JTextField username;
    private javax.swing.JTextField vulnReportURL;
    // End of variables declaration//GEN-END:variables
}
